FORMAT: 1A

# H2020 IPM Decisions - API Gateway
The H2020 IPM Decisions API Gateway is the main entry point for the usage of the other H2020 IPM Decisions microservices. In this document, each microservice will be discribed individually.

## Authentication and Authorization
The API Gateway uses [Bearer Token Authorization.](https://tools.ietf.org/html/rfc6750)
Tokens will be provided by the Identity Provider Service (IDP). Please see on section `Authorization` how to obtain tokens to access the API. 

## Microservices
Below is a list of each microservice and the path for accessing them, e.g, `https://theurl.com/api/idp`
* Identity Provider Service: /api/idp
* User Provision Service: /api/upr
* Content Management System: /api/cms
* Weather Service: /api/wx
* Decision Support system: /api/dss
* Email Service: /api/eml

## Contact
* Name: ADAS Modelling and Informatics Team
* Url: https://www.adas.uk/
* Email: software@adas.co.uk

## License
* [Use under GNU General Public License v3.0](https://www.gnu.org/licenses/gpl-3.0.txt)

## API Version
* Version: v1

# Group IDP - Identity Provider Service

As explained above, the following request will be preceded by `api/idp`. The Api Gateway will redirect the request to the appropriate end point on the IDP microservice.
This microservice has two main areas **Authorization** and **Admin**.
* Authorization: This area of the API is in charge of the authentification and authorization of the users, so `Anonymous` requests are allowed.
* Admin: This area of the API is in charge of the administration of the IDP, so only users with `Admin` privileges will be allowed to make requests.

## Root [/api/idp]

### Root [GET]

This request allows you to check if the microservice is working and some valid requests.

+ Request (application/json)

    + Headers
    
            Accept: application/json

+ Response 200
        
        Succes

    + Attributes (array[LinkDto])

## Registration - Register  [/api/idp/authorization/register]

### Register a New User [POST]

Use this request to register/create a new user into the database. This request is anonymous. If `User Type` is ommited, a default value defined on the configuration file will be added.

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Attributes (UserForRegistrationDto)

+ Response 200

        Succes
    
    + Attributes (UserRegistrationReturnDto)

+ Response 400

### Confirm Registration Email [GET /api/accounts/confirmemail{?userId,token}]

Use this request to confirm user email. This request is anonymous.

+ Request (application/json)

    + Headers
    
            Accept: application/json
+ Parameters

    + userId (guid, required, `08ff7052-2e95-11e3-a1fc-000c294eede0`) ... Unique User Id

    + token (string, required, `abcd1234`)

+ Response 200
+ Response 400

## Reset Passwords  [/api/accounts]

### Forgot Password [POST /api/accounts/forgotpassword]

Use this request to send an email to the user with a reset password token. This request is anonymous.

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Attributes (UserEmailDto)

+ Response 200
+ Response 400

### Reset Password [POST /api/accounts/resetpassword]

Use this request to reset the password from a user. This request is anonymous.

+ Request (application/json)

    + Headers
    
            Accept: application/json

    + Attributes (ResetPasswordDto)

+ Response 200
+ Response 400

## User Account Management  [/api/accounts/{userId}/manage]

### Change Password [POST /api/accounts/{userId}/manage/changepassword]

Use this request to change the password from a user. The user needs JWT to do this request.

+ Request (application/json)

    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

    + Attributes (ChangePasswordDto)

+ Parameters

    + userId (guid, required, `08ff7052-2e95-11e3-a1fc-000c294eede0`) ... Unique User Id

+ Response 200
+ Response 400
+ Response 404

## Authorization -Authenticate with password  [/api/idp/authorization/authenticate]

An existing user can authenticate and get a token that will be used to access the rest of the API.

### AuthenticateUser [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json
            grant_type: password (required)
            client_id: string (required)
            client_secret: string 

    + Attributes (UserForAuthenticationDto)

+ Response 200

        Success
        
    + Headers
    
            Accept: application/json
    
    + Attributes (AuthenticationDto)

+ Response 400

        Bad Request
        
## Authorization - Authenticate with refresh token  [/api/idp/authorization/authenticate/token]

An existing user can authenticate using a refresh token and get a new token to keep accessing the API.

### AuthenticateUserWithToken [POST]

+ Request (application/json)

    + Headers
    
            Accept: application/json
            grant_type: refresh_token (required)
            client_id: string (required)
            client_secret: string
            refresh_token: string (required)

+ Response 200

    Success

    + Headers
    
            Accept: application/json
    
    + Attributes (AuthenticationDto)

+ Response 400

## Admin - ApplicationClients [/api/idp/admin/applicationclients]

Application clients are APIs, JavaScript Clients, etc., that are allowed to use this API.

Use the **Accept** header `application/vnd.h2020ipmdecisions.hateoas+json` to return HATEOAS links of each ApplicationClientDto object

### Get Application Clients [GET /api/idp/admin/applicationclients{?isEnabled,pageSize,orderBy,searchQuery,pageNumber,fields}]

+ Request (application/json)

    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT

+ Parameters

    + isEnabled (boolean, optional, `true`) ... Application Clients Filter

    + pageSize (number, optional, `5`) ... Default 10; Maximun 20

    + orderBy (string, optional, `name desc`) ... name or url - add `desc` at the end for descending order 

    + searchQuery (string, optional, `test`) ... Search against name and url properties

    + pageNumber (number, optional, `1`)

    + fields (string, optional, `id, name`) ... Any property from ApplicationClientDto and `id` is required.


+ Response 200 

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}
                
    + Attributes (ShapedDataWithLinksApplicationClients)
                
+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Get Application Client By Id [GET /api/idp/admin/applicationclients/{id}{?fields}] 

+ Request (application/json)

    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT
            
+ Parameters

    + id (string, required)
    
    + fields (string, optional, `name, refreshTokenLifeTime`) ... Any property from ApplicationClientDto.
    
+ Response 200 (application/json)

        Success

    + Attributes (ApplicationClientDto)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Create Application Client [POST]

+ Request (application/json)

    + Attributes (ApplicationClientForCreationDto)
    
    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT

+ Response 201 (application/json)

    + Attributes (ApplicationClientDto)
    
    + Headers
    
            Location: http://theurl/api/idp/admin/applicationclients/{userId}

+ Response 400 (application/json)
+ Response 401
+ Response 403 

### Partial Update Application Client [PATCH /api/idp/admin/applicationclients/{id}]

Learn more about patch operation using [json-patch+json object](http://jsonpatch.com/).

If a no existing `ID` is passed and the json-patch document has enough information for creating an AplicationClient (see ApplicationClientForCreationDto), a new AplicationClient will be created.

+ Parameters

    + id (string, required)
    
+ Request (application/json-patch+json)

    + Attributes (ApplicationClientDto)
    
    + Headers
    
            Authorization: Bearer JWT

+ Response 201 

    + Attributes (array[JsonPatchOperation])
    
    + Headers
    
            Location: http://theurl/api/idp/admin/applicationclients/{userId}

+ Response 204
+ Response 400 (application/json)
+ Response 401
+ Response 403 

### Delete Application Client [DELETE /api/idp/admin/applicationclients/{id}]

+ Parameters

    + id (string, required)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT

+ Response 204
+ Response 401
+ Response 403 

### Options [OPTIONS]

This request allows you to know what type of methods are allowed in this endpoint

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
+ Response 200
    
    + Headers
    
            Allow: OPTIONS, POST, GET, DELETE, PATCH

+ Response 401
+ Response 403

### Head [HEAD]

This request allows you to know if the endpoint is correct and is working.

+ Request

    + Headers
    
            Authorization: Bearer JWT

+ Response 200
+ Response 401
+ Response 403 

## Admin - RefeshTokens [/api/idp/admin/refreshtokens]

Refresh Tokens are unique tokens linked to a user that allows to authentificate into the API without the need for username and password.

Use the **Accept** header `application/vnd.h2020ipmdecisions.hateoas+json` to return HATEOAS links of each RefreshTokenDto object

### Get Refresh Tokens [GET /api/idp/admin/refreshtokens{?pageSize,pageNumber,fields}]

+ Request (application/json)

    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT

+ Parameters

    + pageSize (number, optional, `5`) ... Default 10; Maximun 20

    + pageNumber (number, optional, `1`)

    + fields (string, optional, `id, name`) ... Any property RefreshTokenDto and `id` is required.

+ Response 200 

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}
                
    + Attributes (ShapedDataWithLinksRefreshTokens)
                
+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get Refresh Token By Id [GET /api/idp/admin/refreshtokens/{id}{?fields}] 

+ Request (application/json)

    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT
            
+ Parameters

    + id (string, required)
    
    + fields (string, optional, `userId, applicationClientId`) ... Any property from RefreshTokenDto.
    
+ Response 200 (application/json)

        Success

    + Attributes (RefreshTokenDto)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Delete Refresh Token [DELETE /api/idp/admin/refreshtokens/{id}]

+ Parameters

    + id (string, required)
    
+ Request

    + Headers
    
            Authorization: Bearer JWT

+ Response 204 
+ Response 401
+ Response 403

### Head [HEAD]

This request allows you to know if the endpoint is correct and is working.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT

+ Response 200
+ Response 401 
+ Response 403 

## Admin - Roles [/api/idp/admin/roles]

In these end points, it will be managed the different roles available for users.

Use the **Accept** header `application/vnd.h2020ipmdecisions.hateoas+json` to return HATEOAS links of each RefreshTokenDto object

### Get Roles [GET /api/idp/admin/roles{?fields}]

+ Request (application/json)

    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT

+ Parameters

    + fields (string, optional, `id, name`) ... Any property from RoleDto and `id` is required.

+ Response 200 
                
    + Attributes (ShapedDataWithLinksRoles)
                
+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Get Role By Id [GET /api/idp/admin/roles/{id}{?fields}] 

+ Request (application/json)

    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT
            
+ Parameters

    + id (string, required)
    
    + fields (string, optional, `normalizedName`) ... Any property from RoleDto.
    
+ Response 200 (application/json)

        Success

    + Attributes (RoleDto)

+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Create Role [POST]

+ Request (application/json)

    + Attributes (RoleForManipulationDto)
    
    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT

+ Response 201 (application/json)

        Success

    + Attributes (RoleForManipulationDto)
    
    + Headers
    
            Location: http://theurl/api/idp/admin/roles/{userId}

+ Response 400 (application/json)
+ Response 401 
+ Response 403

### Delete Role [DELETE /api/idp/admin/roles/{id}]

+ Parameters

    + id (string, required)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT

+ Response 204
+ Response 401 
+ Response 403

### Options [OPTIONS]

This request allows you to know what type of methods are allowed in this endpoint

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
+ Response 200
    
    + Headers
    
            Allow: OPTIONS, POST, GET, DELETE
            
+ Response 401 
+ Response 403

### Head [HEAD]

This request allows you to know if the endpoint is correct and is working.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT

+ Response 200
+ Response 401
+ Response 403 

## Admin - User Claims [/api/idp/admin/{userId}/claims]

### Get Claims From User [GET] 

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
+ Parameters

    + userId (guid, required, `08ff7052-2e95-11e3-a1fc-000c294eede0`) ... Unique User Id
    
+ Response 200 (application/json)

        Success

    + Attributes (array[Claim])

+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Add Claims To User [POST] 

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
    + Attributes(array[ClaimForManipulationDto])
            
+ Parameters

    + userId (guid, required, `08ff7052-2e95-11e3-a1fc-000c294eede0`) ... Unique User Id
    
+ Response 200 (application/json)

        Success

    + Attributes (UserDto)

+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Remove Claims From User [DELETE] 

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
    + Attributes(array[ClaimForManipulationDto])
            
+ Parameters

    + userId (guid, required, `08ff7052-2e95-11e3-a1fc-000c294eede0`) ... Unique User Id
    
+ Response 200 (application/json)

        Success

    + Attributes (UserDto)

+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Options [OPTIONS]

This request allows you to know what type of methods are allowed in this endpoint

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
+ Response 200
    
    + Headers
    
            Allow: OPTIONS, POST, GET, DELETE

+ Response 401 
+ Response 403

## Admin - User Roles [/api/idp/admin/{userId}/roles]

### Get Roles From User [GET] 

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
+ Parameters

    + userId (guid, required, `08ff7052-2e95-11e3-a1fc-000c294eede0`) ... Unique User Id
    
+ Response 200 (application/json)

        Success

    + Attributes (array[RoleDto])

+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Add Roles To User [POST] 

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
    + Attributes(array[RoleForManipulationDto])
            
+ Parameters

    + userId (guid, required, `08ff7052-2e95-11e3-a1fc-000c294eede0`) ... Unique User Id
    
+ Response 200 (application/json)

        Success

    + Attributes (UserDto)

+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Remove Roles From User [DELETE] 

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
    + Attributes(array[RoleForManipulationDto])
            
+ Parameters

    + userId (guid, required, `08ff7052-2e95-11e3-a1fc-000c294eede0`) ... Unique User Id
    
+ Response 200 (application/json)

        Success

    + Attributes (UserDto)

+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Options [OPTIONS]

This request allows you to know what type of methods are allowed in this endpoint

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
+ Response 200
    
    + Headers
    
            Allow: OPTIONS, POST, GET, DELETE

+ Response 401 
+ Response 403

## Admin - Users [/api/idp/admin/users]

Use the **Accept** header `application/vnd.h2020ipmdecisions.hateoas+json` to return HATEOAS links of each ApplicationClientDto object

### Get Users [GET /api/idp/admin/users{?pageSize,orderBy,searchQuery,pageNumber,fields}]

+ Request (application/json)

    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT

+ Parameters

    + pageSize (number, optional, `5`) ... Default 10; Maximun 20

    + orderBy (string, optional, `email desc`) ... email - add `desc` at the end for descending order 

    + searchQuery (string, optional, `test`) ... Search against the email property

    + pageNumber (number, optional, `1`)

    + fields (string, optional, `id, email`) ... Any property from UserDto and `id` is required.


+ Response 200 

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}
                
    + Attributes (ShapedDataWithLinksUsers)
                
+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Get User By Id [GET /api/idp/admin/users/{id}{?fields}] 

+ Parameters

    + id (string, required)
    
    + fields (string, optional, `email`) ... Any property from UserWithRolesClaimsDto.

+ Request (application/json)

    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT
    
+ Response 200 (application/json)

        Success

    + Attributes (UserWithRolesClaimsDto)

+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Delete User [DELETE /api/idp/admin/users/{id}]

+ Parameters

    + id (string, required)

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT

+ Response 204
+ Response 401 
+ Response 403

### Options [OPTIONS]

This request allows you to know what type of methods are allowed in this endpoint

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
+ Response 200
    
    + Headers
    
            Allow: OPTIONS, POST, GET, DELETE

+ Response 401
+ Response 403

### Head [HEAD]

This request allows you to know if the endpoint is correct and is working.

+ Request

    + Headers
    
            Authorization: Bearer JWT

+ Response 200
+ Response 401
+ Response 403 

# Group UPR - User Provision Service

As explained above, the following request will be preceded by `api/upr`. The Api Gateway will redirect the request to the appropriate end point on the UPR microservice.

## Root [/api/upr]

### Root [GET]

This request allows you to check if the microservice is working and some valid requests.

+ Request (application/json)

    + Headers
    
            Accept: application/json

+ Response 200
        
        Succes

    + Attributes (array[LinkDto])


## User Profiles [/api/upr/users/profiles]

The user will be identified using the **UserId** on the authentification JWT

### Get User Profile [GET /api/upr/users/profiles{?fields}] 

+ Parameters
    
    + fields (string, optional, `id, fullname`) ... Any property from UserProfileDto.

+ Request (application/json)

    + Headers
            
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT

+ Response 200 (application/json)

        Success

    + Attributes (UserProfileDto)

+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

### Create User Profile [POST]

+ Request (application/json)

    + Attributes (UserProfileForCreationDto)
    
    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT

+ Response 201 (application/json)

    + Attributes (UserProfileDto)
    
    + Headers
    
            Location: http://theurl/api/upr/user/{userId}/profiles

+ Response 400 (application/json)
+ Response 401 
+ Response 403

### Partial Update User Profile [PATCH]

Learn more about patch operation using [json-patch+json object](http://jsonpatch.com/).

If a no existing `ID` is passed and the json-patch document has enough information for creating a UserProfile (see UserProfileForCreationDto), a new UserProfile will be created.
    
+ Request (application/json-patch+json)

    + Attributes (array[JsonPatchOperation])
    
    + Headers
    
            Authorization: Bearer JWT

+ Response 201 

    + Attributes (UserProfileDto)
    
    + Headers
    
            Location: http://theurl/api/upr/user/profiles

+ Response 204
+ Response 400 (application/json)
+ Response 401
+ Response 403

### Delete User Profile [DELETE]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT

+ Response 204
+ Response 401 
+ Response 403

### Options [OPTIONS]

This request allows you to know what type of methods are allowed in this endpoint

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            
+ Response 200
    
    + Headers
    
            Allow: OPTIONS, POST, GET, DELETE

+ Response 401 
+ Response 403 

### Head [HEAD]

This request allows you to know if the endpoint is correct and is working.

+ Request

    + Headers
    
            Authorization: Bearer JWT

+ Response 200
+ Response 401
+ Response 403

## Farms [/api/upr/farms]

The farms edited on this endpoint will be associated to a **user**. The user will be identified using the **UserId** on the authentification JWT.

### Create Farm [POST]

Use this end point to add a new farm to the user. The UserId used for requesting the farm will be on the authentification JWT.

Use the **Accept** header `application/vnd.h2020ipmdecisions.hateoas+json` to return HATEOAS links of the new Farm object

+ Request (application/json)

    + Attributes (FarmForCreationDto)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 201 (application/json)

    + Attributes (ShapedDataWithLinksFarm)
    
    + Headers
    
            Location: http://theurl/api/upr/farms/{farmId}

+ Response 400 (application/json)
+ Response 401
+ Response 403

### Get Farms [GET /api/upr/farms{?pageSize,orderBy,searchQuery,pageNumber,fields}]

Use this endpoint to get the farms that are associated with an user.

Use the **Accept** header `application/vnd.h2020ipmdecisions.hateoas+json` to return HATEOAS links of the each Farm object

+ Request (application/json)
    
    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT
            
+ Parameters
    + pageSize (number, optional, `5`) ... Default 10; Maximun 20
    + orderBy (string, optional, `name desc`) ... name or url - add `desc` at the end for descending order
    + searchQuery (string, optional, `test`) ... Search against name and url properties
    + pageNumber (number, optional, `1`)
    + fields (string, optional, `id, name`) ... Any property from FarmDto and `id` is required.

+ Response 200 (application/json)

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}

    + Attributes (ShapedDataWithLinksFarms)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get Farms and Associated Data[GET /api/upr/farms{?pageNumber,pageSize,orderBy,searchQuery,pageNumber,fields,childrenPageSize,childrenPageNumber}]

Use this endpoint to get the farms that are associated with an user.

Use the **Accept** header `application/vnd.h2020ipmdecisions.farm.withchildren.hateoas+json` to return HATEOAS links of the each Farm object and its children

+ Request (application/json)
    
    + Headers
    
            Accept: application/vnd.h2020ipmdecisions.farm.withchildren+json; application/vnd.h2020ipmdecisions.farm.withchildren.hateoas+json
            Authorization: Bearer JWT
            
+ Parameters
    + pageSize (number, optional, `5`) ... Default 10; Maximun 20
    + orderBy (string, optional, `name desc`) ... name or url - add `desc` at the end for descending order 
    + searchQuery (string, optional, `test`) ... Search against name and url properties
    + pageNumber (number, optional, `1`)
    + fields (string, optional, `id, name`) ... Any property from FarmDto and `id` is required.
    + childrenPageSize (number, optional, `5`) ... Default 5; Maximun 10
    + childrenPageNumber (number, optional, `5`) ... Default 1

+ Response 200 (application/json)

    + Attributes (ShapedDataWithLinksFarmWithShapedChildren)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get Farm By Id [GET /api/upr/farms/{farmId}]

Use this endpoint to get an unique farm that is associated with an user.

Use the **Accept** header `application/vnd.h2020ipmdecisions.hateoas+json` to return HATEOAS links of the Farm object

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id

+ Request (application/json)
    
    + Headers
    
            Accept: application/json; application/vnd.h2020ipmdecisions.hateoas+json
            Authorization: Bearer JWT

+ Response 200 (application/json)

        Success

    + Attributes (ShapedDataWithLinksFarm)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get Farm By Id With HATEOAS [GET /api/upr/farms/{farmId}{?pageSize,pageNumber}]

Use this endpoint to get an unique farm that is associated with an user.

Use the **Accept** header `application/vnd.h2020ipmdecisions.farm.withchildren.hateoas+json` to return HATEOAS links of the Farm object

+ Parameters
    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
    + pageSize (number, optional, `5`) ... Default 5; Maximun 10
    + pageNumber (number, optional, `1`)


+ Request (application/json)
    
    + Headers
    
            Accept: application/vnd.h2020ipmdecisions.farm.withchildren+json application/vnd.h2020ipmdecisions.farm.withchildren.hateoas+json
            Authorization: Bearer JWT

+ Response 200 (application/json)

        Success

    + Attributes (ShapedDataWithLinksFarmWithShapedChildren)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Partial Update of Farm By Id [PATCH /api/upr/farms/{farmId}]

Use this endpoint to update a user farm.

If a no existing `farmId` is passed and the json-patch document has enough information for creating a Farm (see UserFarmForCreationDto), a new User Farm will be created.

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id

+ Request (application/json)
    
    + Attributes (array[JsonPatchOperation])
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 201 

    + Attributes (FarmDto)
    + Headers
    
            Location: http://theurl/api/upr/farms/{farmId}
            
+ Response 204
+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Delete Farm By Id [DELETE /api/upr/farms/{farmId}]

Use this endpoint to remove a farm that is associated with an user using its id. 

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id

+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 204
+ Response 401
+ Response 403

## Fields [/api/upr/farms/{farmId}/fields]

Fields needs to be associate to a farm. FarmId must be associated to the UserId of the Authorization JWT.

### Create Field [POST]

Use this end point to add a new field to a farm.

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id

+ Request (application/json)

    + Attributes (FieldForCreationDto)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 201 (application/json)

    + Attributes (FieldDto)
    
    + Headers
    
            Location: http://theurl/api/upr/farms/{farmId}/fields/{fieldId}

+ Response 400 (application/json)
+ Response 401
+ Response 403

### Get Fields From Farm [GET /api/upr/farms/{farmId}/fields{?pageSize,pageNumber}]

Use this endpoint to get the fields that are associated with a farm.

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
    
    + pageSize (number, optional, `5`) ... Default 10; Maximun 20
     
    + pageNumber (number, optional, `1`)
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}

    + Attributes (array[FieldDto])

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get a Field By Id [GET /api/upr/farms/{farmId}/fields/{fieldId}]

Use this endpoint to get an unique farm that is associated with an user.

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
    + fieldId (guid, required, `ae9f3e9b-2b6b-48db-a97b-d0abac696553`) ... Unique Field Id

+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

        Success

    + Attributes (FieldDto)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Partial Update of a Field By Id [PATCH /api/upr/farms/{farmId}/fields/{fieldId}]

Use this endpoint to update a user farm.

If a no existing `farmId` is passed and the json-patch document has enough information for creating a Farm (see UserFarmForCreationDto), a new User Farm will be created.


+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
    + fieldId (guid, required, `ae9f3e9b-2b6b-48db-a97b-d0abac696553`) ... Unique Field Id

+ Request (application/json)
    
    + Attributes (array[JsonPatchOperation])
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 201 

    + Attributes (FieldDto)
    + Headers
    
            Location: http://theurl/api/upr/farms/{farmId}/fields/{fieldId}
            
+ Response 204
+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Delete Field By Id [DELETE /api/upr/farms/{farmId}/fields/{fieldId}]

Use this endpoint to remove a farm that is associated with an user using its id. 

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
    + fieldId (guid, required, `ae9f3e9b-2b6b-48db-a97b-d0abac696553`) ... Unique Field Id

+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 204
+ Response 401
+ Response 403

## Alert Subscriptions [/api/upr/farms/{farmId}/alerts]

Subscription to alerts are at farm level. FarmId must be associated to the UserId of the Authorization JWT.

### Create Alert [POST]

Use this end point to create/suscribe to a new alert.

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id

+ Request (application/json)

    + Attributes (AlertSubscriptionForCreationDto)
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 201 (application/json)

    + Attributes (AlertSubscriptionDto)
    
    + Headers
    
            Location: http://theurl/api/upr/farms/{farmId}/alerts/{fieldId}

+ Response 400 (application/json)
+ Response 401
+ Response 403

### Get Alerts From Farm [GET]

Use this endpoint to get the fields that are associated with a farm.

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Attributes (array[AlertSubscriptionDto])

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get an Alert By Id [GET /api/upr/farms/{farmId}/alerts/{alertId}]

Use this endpoint to get an specific alert that is associated with a farm.

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
    + alertId (guid, required, `d747c07d-5d37-4c13-9026-b2db528156a7`) ... Unique Alert Id

+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

        Success

    + Attributes (AlertSubscriptionDto)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Delete Alert By Id [DELETE /api/upr/farms/{farmId}/alerts/{alertId}]

Use this endpoint to remove an alert from a farm.. 

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
    + alertId (guid, required, `d747c07d-5d37-4c13-9026-b2db528156a7`) ... Unique Alert Id

+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 204
+ Response 401
+ Response 403


## Alert Notifications [/api/upr/farms/{farmId}/notifications]

Notifications will be produced at farm level. FarmId must be associated to the UserId of the Authorization JWT.

### Get Notifictions From Farm [GET /api/upr/farms/{farmId}/notifications]{?onlyUnread,pageSize,pageNumber}]

Use this endpoint to get the fields that are associated with a farm.

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
    
    + onlyUnread (boolean, optional, `true`) ... Filter to bring only unread notifications
    
    + pageSize (number, optional, `5`) ... Default 10; Maximun 20
     
    + pageNumber (number, optional, `1`)
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}

    + Attributes (array[AlertSubscriptionDto])

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get a Notification By Id [GET /api/upr/farms/{farmId}/notifications/{notificationId}]

Use this endpoint to get an specific notification that is associated with a farm.

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
    + notificationId (guid, required, `c30c7e54-f4f0-4416-ad3e-ca8f50a08968`) ... Unique Notification Id

+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

        Success

    + Attributes (AlertSubscriptionDto)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Partial Update of a Notification By Id [PATCH /api/upr/farms/{farmId}/notifications/{notificationId}]

Use this endpoint to mark a notification as read..

+ Parameters

    + farmId (guid, required, `cebda65f-807d-4d07-b550-b067b533a8a0`) ... Unique Farm Id
    + notificationId (guid, required, `c30c7e54-f4f0-4416-ad3e-ca8f50a08968`) ... Unique Notification Id

+ Request (application/json)
    
    + Attributes (AlertResultNotificationForUpdateDto)
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT
            
+ Response 204
+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

## Observations [/api/upr/fields/{fieldId}/observations]

Observations needs to be associate to a field. FieldId must be associated to the UserId of the Authorization JWT.

### Add Observation [POST]

Use this end point to add a new observation to the field.

+ Parameters

    + fieldId (guid, required, `ae9f3e9b-2b6b-48db-a97b-d0abac696553`) ... Unique Field Id

+ Request (application/json)

    + Attributes (FieldObservationForCreationDto)
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 201 (application/json)

    + Attributes (FieldObservationDto)
    + Headers
    
            Location: http://theurl/api/upr/farms/{farmId}/alerts/{fieldId}

+ Response 400 (application/json)
+ Response 401
+ Response 403

### Get Observations From Field [GET /api/upr/fields/{fieldId}/observations{?pageSize,pageNumber}]

Use this endpoint to get the oberservations that are associated with a field.

+ Parameters

    + fieldId (guid, required, `ae9f3e9b-2b6b-48db-a97b-d0abac696553`) ... Unique Field Id
    
    + pageSize (number, optional, `5`) ... Default 10; Maximun 20
     
    + pageNumber (number, optional, `1`)
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}

    + Attributes (array[FieldObservationDto])

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get a Observation By Id [GET /api/upr/fields/{fieldId}/observations/{observationId}]

Use this endpoint to get an observation from a field.

+ Parameters

    + fieldId (guid, required, `ae9f3e9b-2b6b-48db-a97b-d0abac696553`) ... Unique Field Id
    + observationId (guid, required, `21f2a563-a604-46f5-a572-6ac733566307`) ... Unique Field Id

+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

        Success

    + Attributes (FieldObservationDto)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Delete Observation By Id [DELETE /api/upr/fields/{fieldId}/observations/{observationId}]

Use this endpoint to remove an observation that is associated with the field. 

+ Parameters

    + fieldId (guid, required, `ae9f3e9b-2b6b-48db-a97b-d0abac696553`) ... Unique Field Id
    + observationId (guid, required, `21f2a563-a604-46f5-a572-6ac733566307`) ... Unique Field Id

+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 204
+ Response 401
+ Response 403


## Field Crop Decision Combinations  [/api/upr/fields/{fieldId}/cropdecisions]

Use these end points for adding Crop, Pest Dss combination to a selected field.

### Associate a Crop Decisions To a Field [POST /api/upr/fields/{fieldId}/cropdecisions]

Use this endpoint to get the crop decision combinations that are associated for the field. The Crop Decisions Ids are obtained using the following end point ``

+ Parameters

    + fieldId (guid, required, `ae9f3e9b-2b6b-48db-a97b-d0abac696553`) ... Unique Field Id
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT
    
    + Attributes
        
        + CropDecisionCombinatioId : d8b4e603-c714-4df4-bc1a-6e706aff9a1c (string, required) ... Unique Crop Decisions Combination Id

+ Response 200 (application/json)

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}

    + Attributes (CropCombinationDto)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get Crop Decisions From Field [GET /api/upr/fields/{fieldId}/cropdecisions{?pageSize,pageNumber}]

Use this endpoint to get the crop decision combinations that are associated for the field.

+ Parameters

    + fieldId (guid, required, `ae9f3e9b-2b6b-48db-a97b-d0abac696553`) ... Unique Field Id
    
    + pageSize (number, optional, `5`) ... Default 10; Maximun 20
     
    + pageNumber (number, optional, `1`)
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}

    + Attributes (array[CropCombinationDto])

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404


## Crops [/api/upr/data/crops]

Standard users can only `GET` crops. To modify the information you must have the adequate permisions. Crops can't be delete, they should be mark as `deprecated`.

### Get Crops [GET /api/upr/data/crops{?pageSize,pageNumber,includeDeprecated}]

Use this endpoint to get the list of crops.

+ Parameters
    
    + pageSize (number, optional, `5`) ... Default 10; Maximun 20
     
    + pageNumber (number, optional, `1`)
    
    + includeDeprecated (boolean, optional, `false`) ... Return crops no longer available - deprecated. Default is false
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}

    + Attributes (array[CropDto])

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get Crop by Id [GET /api/upr/data/crops/{cropId}]

Use this endpoint to get a crop by Id.

+ Parameters
    
    + cropId (guid, required, `fa7f6d53-3c10-47a9-9adb-7eaa2ab1a308`) ... Unique Crop Id
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Attributes (CropDto)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Create Crop - Restricted Access [POST]

Use this end point to create a new crop.

+ Request (application/json)

    + Attributes (CropForModificationDto)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 201 (application/json)

    + Attributes (CropDto)
    
    + Headers
    
            Location: http://theurl/api/upr/dara/crops/{cropId}

+ Response 400 (application/json)
+ Response 401
+ Response 403

### Partial Update of a Crop By Id - Restricted Access [PATCH /api/upr/data/crops/{cropId}]

Use this endpoint to update a crop.

+ Parameters

    + cropId (guid, required, `fa7f6d53-3c10-47a9-9adb-7eaa2ab1a308`) ... Unique Crop Id

+ Request (application/json)
    
    + Attributes (CropForModificationDto)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT
            
+ Response 204
+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

## Pests [/api/upr/data/pests]

Standard users can only `GET` crops. To modify the information you must have the adequate permisions. Pest can't be delete, they should be mark as `deprecated`.

### Get Pests [GET /api/upr/data/pests{?pageSize,pageNumber,includeDeprecated}]

Use this endpoint to get the list of pests.

+ Parameters
    
    + pageSize (number, optional, `5`) ... Default 10; Maximun 20
     
    + pageNumber (number, optional, `1`)
    
    + includeDeprecated (boolean, optional, `false`) ... Return pests no longer available - deprecated. Default is false
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}

    + Attributes (array[PestDto])

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Get Pest by Id [GET /api/upr/data/pests/{pestId}]

Use this endpoint to get a pest by Id.

+ Parameters
    
    + pestId (guid, required, `8ecedd0d-6c63-47a4-b4a7-fac34a71c60c`) ... Unique Pest Id
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Attributes (PestDto)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

### Create Pest - Restricted Access [POST]

Use this end point to create a new pest.

+ Request (application/json)

    + Attributes (PestForModificationDto)
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 201 (application/json)

    + Attributes (PestDto)
    
    + Headers
    
            Location: http://theurl/api/upr/data/pests/{pestId}

+ Response 400 (application/json)
+ Response 401
+ Response 403

### Partial Update of a Pest By Id - Restricted Access [PATCH /api/upr/data/pests/{pestId}]

Use this endpoint to update a pest.

+ Parameters

    + pestId (guid, required, `8ecedd0d-6c63-47a4-b4a7-fac34a71c60c`) ... Unique Pest Id

+ Request (application/json)
    
    + Attributes (PestForModificationDto)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT
            
+ Response 204
+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404


## Crop Decisions [/api/upr/cropdecisions]

These end points hold the different crop, pest, DSS combinations. The combinations are created internally, so the main functionality is `GET` information.

### Get Crop Decisions [GET /api/upr/cropdecisions{?pageSize,pageNumber}]

Use this endpoint to get the list of combinations available.

+ Parameters
    
    + pageSize (number, optional, `5`) ... Default 10; Maximun 20
     
    + pageNumber (number, optional, `1`)
     
+ Request (application/json)
    
    + Headers
    
            Accept: application/json
            Authorization: Bearer JWT

+ Response 200 (application/json)

    + Headers
        
            X-Pagination: {`TotalCount`(number),`PageSize`(number),`CurrentPage`(number),`TotalPages`(number)}

    + Attributes (array[CropCombinationDto])

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404


# Group CMS - Content Management System Service

As explained above, the following request will be preceded by `api/cms`. The Api Gateway will redirect the request to the appropriate end point on the CMS microservice.

The CMS has been build using [Cockpit CMS](https://getcockpit.com/). So the API endpoint resquest can be found on its [documentation](https://getcockpit.com/documentation/api).

## Singletons

Singletons represent Data structure in Cockpit CMS that is used just one time, which perfectly fit for content on Landing Page of IPM Decision Portal

## Assets List [/api/cms/cockpit/assets]
List of all avaibable assets in CMS with details about them.

### Get Assets List [GET]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            Cockpit-Token: Bearer JWT
            
+ Response 200 (application/json)

    + Attributes 
        + assets (array[Asset])
        + total (number)
        
+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

## Resources [/api/cms/singletons/get]

## Footer [/api/cms/singletons/get/footer]

Footer in HTML format

### Get footer [GET]


+ Request (application/json)

    + Headers
            
            Authorization: Bearer JWT
            Cockpit-Token: Bearer JWT
            
+ Response 200 (application/json)

     + Attributes (Footer)
     
+ Response 400 (application/json)
+ Response 401 
+ Response 403 
+ Response 404

## Banner [/api/cms/singletons/get/banner]

Website Logo

### Get banner [GET]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            Cockpit-Token: Bearer JWT
            
+ Response 200 (application/json)

     + Attributes (Image)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

## Home Slideshow [/api/cms/singletons/get/slideshow]

Slideshow pictures on Landing Page

###Get Slideshow [GET]

+ Request (application/json)

    + Headers
            
            Authorization: Bearer JWT
            Cockpit-Token: Bearer JWT
            
+ Response 200 (application/json)

     + Attributes (Slideshow)

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

## Home Article 1 [/api/cms/singletons/get/homearticle1]

First article on Landing Page

### Get Home Article 1 [GET]

+ Request (application/json)

    + Headers
            
            Authorization: Bearer JWT
            Cockpit-Token: Bearer JWT
            
+ Response 200 (application/json)

     + Attributes (HomeArticle1)
        
+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

## Home Article 2 [/api/cms/singletons/get/homearticle2]

First article on Landing Page

### Get Home Article 2 [GET]

+ Request (application/json)

    + Headers
            
            Authorization: Bearer JWT
            Cockpit-Token: Bearer JWT
            
+ Response 200 (application/json)

     + Attributes (HomeArticle1)
        
+ Response 400 (application/json)
+ Response 401 
+ Response 403 
+ Response 404

## Home Grid [/api/cms/singletons/get/homegrid]

Home Grid on Landing Page

### Get Home Grid [GET]

+ Request (application/json)

    + Headers
            
            Authorization: Bearer JWT
            Cockpit-Token: Bearer JWT
            
+ Response 200 (application/json)

     + Attributes (HomeGrid)

+ Response 400 (application/json)
+ Response 401 
+ Response 403 
+ Response 404

## News [/api/cms/singletons/get/news]

News on Landing Page

### Get News [GET]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer JWT
            Cockpit-Token: Bearer JWT
            
+ Response 200 (application/json)

     + Attributes (News)

+ Response 400 (application/json)
+ Response 401 
+ Response 403
+ Response 404

## Terms and conditions [/api/cms/singletons/get/termsnconditions]

Application Terms and conditions

### Get Terms and Conditions [GET]

+ Request (application/json)

    + Headers
            
            Authorization: Bearer JWT
            Cockpit-Token: Bearer JWT
            
+ Response 200 (application/json)

     + Attributes ()

+ Response 400 (application/json)
+ Response 401
+ Response 403
+ Response 404

# Group WX - Weather Service // ToDo

As explained above, the following request will be preceded by `api/wx`. The Api Gateway will redirect the request to the appropriate end point on the WX microservice.

# Group DSS - Decision Suport System Service // ToDo

As explained above, the following request will be preceded by `api/dss`. The Api Gateway will redirect the request to the appropriate end point on the DSS microservice.

# Group EML - Email Service

As explained above, the following request will be preceded by `/api/eml`. The Api Gateway will redirect the request to the appropriate end point on the EML microservice.
This microservice is in charge of sending emails requested by other IPM Decisions microservices and be in charge of the mailing list.

All the requests of this microservice will be for internal use.

To protect the missuse of the email service by external parties, the microservice will be secure by a custom header and token, setted up during the deployment, for email sending and/or a JWT authorization header. 

## Root [/api/eml]

### Root [GET]

This request allows you to check if the microservice is working and some valid requests.

+ Request (application/json)

    + Headers
    
            Accept: application/json

+ Response 200
        
        Succes

    + Attributes (array[LinkDto])

## Accounts [/api/eml/accounts]

### Registration Email [POST /api/eml/accounts/registrationemail]

This request sends an email with a link to the registration page. This call is internal, so it should be done by the Identity Provider Service.

+ Request (application/vnd.h2020ipmdecisions.email+json)

    + Headers
    
            your-custom-security-header: 1234
    
    + Attributes(RegistrationEmailDto)
            
+ Response 200
+ Response 400
        
### Forgot Password Email [POST /api/eml/accounts/forgotpassword]

This request sends an email with a link to the reset password page. This call is internal, so it should be done by the Identity Provider Service.

+ Request (application/vnd.h2020ipmdecisions.email+json)

    + Headers
    
            your-custom-security-header: 1234
    
    + Attributes(ForgotPasswordEmailDto)
            
+ Response 200
+ Response 400

## Mailing List Contacts [/api/mailinglist/contacts]

### Add or Update Contact [PUT]

Use this endpoint to update and add contacts (also know as [upsert](https://en.wiktionary.org/wiki/upsert)).
If the contact already exists in the system, any entries you submit via this endpoint will update the existing contact in the system.

+ Request (application/json)

    + Headers
    
            ipm-eml-auth: 1234
    
    + Attributes(EmailingListContactDto)
            
+ Response 200
+ Response 400 (application/json)

### Get Contact [GET /api/mailinglist/contacts/{email}]

Use this endpoint to search by email and return the ContactId.

+ Request

    + Headers
    
            ipm-eml-auth: 1234
    
+ Parameters

    + email (string, required)
            
+ Response 200
    
    + Attributes 

        + id (string)

+ Response 400 (application/json)
+ Response 404

### Delete Contact [DELETE /api/mailinglist/contacts/{email}]

Use this endpoint deletes a contact from the mailing list.

+ Request

    + Headers
    
            ipm-eml-auth: 1234
    
+ Parameters

    + email (string, required)
            
+ Response 204
+ Response 400 (application/json)

# Data Structures

## AlertResultNotificationDto (object)
### Properties
+ `alertId` (string)
+ `isRead` (boolean)

## AlertResultNotificationForUpdateDto (object)
### Properties
+ `isRead` (boolean, required)

## AlertSubscriptionDto (object)
### Properties
+ `alertId` (string)
+ `isActive` (boolean)

## AlertSubscriptionForCreationDto (object)
### Properties
+ `alertId` : cd8d0905-b438-422f-b031-12f75e3f8992  (string, required)

## Asset (object)
### Properties
+ `path` (string)
+ `title` (string)
+ `mime` (string)
+ `description` (string)
+ `tags` (array[number]) - List of asset tags
+ `size` (number)
+ `image` (boolean)
+ `video` (boolean)
+ `audio` (boolean)
+ `archive` (boolean)
+ `document` (boolean)
+ `code` (boolean)
+ `created` (string)
+ `modified` (string)
+ `_by` (string)
+ `width` (number)
+ `height` (number)
+ `colors` (array[string]) - List of colors
+ `folder` (string)
+ `_id` (string)

## ApplicationClientDto (object)
### Properties
+ `id` (string) 
+ `base64Secret` (string) 
+ `name` (string) 
+ `applicationClientType` (enum[number]) 
    + `0` 
    Public - Doesn't need client secret to log in
    + `1`
    Confidential - Needs client secret to log in
+ `enabled` (boolean) 
+ `refreshTokenLifeTime` (number) 
+ `url` (string) 

## ApplicationClientForCreationDto (object)
### Properties
+ `name` (string, required) 
+ `applicationClientType` (enum[number], required) 
    + `0` - Public - Doesn't need client secret to log in
    + `1` - Confidential - Needs client secret to log in
+ `enabled` (boolean, required) 
+ `refreshTokenLifeTime` (number, required) 
+ `url` (string, required)

## AuthenticationDto (object)
###  Properties
+ `id` (string) 
+ `email` (string) 
+ `roles` (array[RoleDto]) - List of roles
+ `claims` (array[Claim]) - List of claims applied to the user
+ `token` (string) 
+ `tokenType`: bearer(string) 
+ `refreshToken` (string)

## ChangePasswordDto (object)
### Properties
+ `currentPassword` : Password1! (string, required)
+ `newPassword` : NewPassword1! (string, required) - Min 6 characters , requires a digit, lowecase, uppercase and special character

## Claim (object)
### Properties
+ `issuer` (string)
+ `originalIssuer` (string)
+ `properties` (string)
+ `subject` (string)
+ `type` (string) 
    This is used for user authorization
+ `value` (string)
    This is used for user authorization
+ `valueType` (string)

## ClaimDto (object)
### Properties
+ `type` (string) 
    This is used for user authorization
+ `value` (string)
    This is used for user authorization

## ClaimForManipulationDto (object)
### Properties
+ `type` (string, required, nullable) 
+ `value` (string, required, nullable)

## Coordinates
### Properties
+ `x` : 52.6 (number) - East/West longitude coordinates 
+ `y` : 2.12 (number) - North/South latitude coordinates
+ `srid` : 4326 (number) - Spatial reference identifier associated with the coordinate system.

## CropCombinationDto
### Properties
+ `id` (string)
+ `Crop` (CropDto)
+ `PestId` (PestDto)
+ `Dss` (string)

## CropDto
### Properties
+ `id` (string)
+ `inf1` (string)
+ `inf2` (string)
+ `deprecated` (boolean)

## CropForModificationDto
### Properties
+ `inf1` (string, required)
+ `inf2` (string)
+ `deprecated` (boolean)

## EmailingListContactDto
### Properties
+ `email` (string, required) 
+ `firstName` (string)
+ `lastName` (string)

## FarmDto (object)
### Properties
+ `id` (string)
+ `name` (string)
+ `inf1` (string)
+ `inf2` (string)
+ `location` (Coordinates)

## FarmForCreationDto (object)
### Properties
+ `name`: myNewFarm (string, required)
+ `inf1` (string)
+ `inf2` (string)
+ `location` (Coordinates, required)

## FarmWithShapedChildrenDto
### Properties
+ `id` (string)
+ `name` (string)
+ `inf1` (string)
+ `inf2` (string)
+ `location` (Coordinates)
+ `fields` (array[FieldDto])
+ `alertsSubscriptions` (array[AlertSubscriptionDto])
+ `alertsNotifications` (array[AlertResultNotificationDto])

## FieldForCreationDto (object)
### Properties
+ `name`: myNewField (string, required)
+ `inf1` (string)
+ `inf2` (string)
+ `location` (Coordinates, required)

## FieldDto (object)
### Properties
+ `id` (string)
+ `name` (string)
+ `inf1` (string)
+ `inf2` (string)
+ `location` (Coordinates)
+ `cropPestDss` (array[string])
+ `observations` (array[string])

## FieldObservationDto
### Properties
+ `id` (string) 
+ `location` (Coordinates)
+ `time` (string)
+ `pestEppoCode` (string) - https://www.eppo.int/RESOURCES/eppo_databases/eppo_codes
+ `cropEppoCode` (string) - https://www.eppo.int/RESOURCES/eppo_databases/eppo_codes

## FieldObservationForCreationDto
### Properties
+ `location` (Coordinates, required)
+ `time` (string, required)
+ `pestEppoCode` (string, required) - https://www.eppo.int/RESOURCES/eppo_databases/eppo_codes
+ `cropEppoCode` (string, required) - https://www.eppo.int/RESOURCES/eppo_databases/eppo_codes

## Footer (object)
### Properties
+ `content` (string)
+ `_mby` (string)
+ `_by` (string)

## ForgotPasswordEmailDto (object)
### Properties
+ `toAddress` (string, required) 
+ `callbackUrl` : https//resetPasswordUrl?email=youremail@test.com&token=abcd1234 (string, required)
+ `token` (string)

## HomeArticle1 (object)
### Properties
+ `title` (string)
+ `content` (string)
+ `_mby` (string)
+ `_by` (string)

## HomeArticle2 (object)
### Properties
+ `title` (string)
+ `content` (string)
+ `contentUrl` (Asset)
+ `_mby` (string)
+ `_by` (string)
+ `media` (Asset)
+ `mediabackground` 
    + `path` (string)

## HomeGrid (object)
### Properties
+ `title1` (string)
+ `content1` (string)
+ `title2` (string)
+ `content2` (string)
+ `title3` (string)
+ `content3` (string)
+ `title4` (string)
+ `content4` (string)
+ `title5` (string)
+ `content5` (string)
+ `title6` (string)
+ `content6` (string)
+ `_mby` (string)
+ `_by` (string)

## Image (object) (object)
### Properties
+ `path` (string)
+ `_mby` (string)
+ `_by` (string)

## JsonPatchOperation (object)
### Properties
+ `value` (object, optional, nullable) - For `add`, `replace` or `test` operations
+ `path` (string, optional, nullable) - Property name
+ `op` (string, optional, nullable) - add, remove, replace, copy, move or test
+ `from` (string, optional, nullable) - For `copy` or `move` operations

## LinkDto (object)
### Properties
+ `href` (string)
+ `rel` (enum[string]) 
    + `self` 
    + `next_page`
    + `previous_page`
+ `method` (string)

## News (object)
### Properties
+ `picture`
    + `path` (string)
+ `news` (array[NewsField])
+ `_mby` (string)
+ `_by` (string)
+ `articles` (array[NewsField])

## NewsField (object)
### Properties
+ `field`
    + `type` (string)
    + `name` (string)
+ `value` (string)

## PestDto
### Properties
+ `id` (string)
+ `inf1` (string)
+ `inf2` (string)
+ `deprecated` (boolean)

## PestForModificationDto
### Properties
+ `inf1` (string)
+ `inf2` (string)
+ `deprecated` (boolean)

## RefreshTokenDto (object)
### Properties
+ `id` (string) 
+ `userId` (string) 
+ `applicationClientId` (string)
+ `protectedTicket` (string)
+ `expiresUtc` (string)

## RegistrationEmailDto (object)
### Properties
+ `toAddress` (string, required) 
+ `callbackUrl` : https//UIConfirmEmailUrl?userId=1234&token=abcd1234 (string, required) 
+ `token` (string)

## ResetPasswordDto (object)
### Properties
+ `email` (string, required) 
+ `password` (string, required) 
+ `token` (string, required)

## RoleDto (object)
### Properties
+ `id` (string) 
+ `name` (string) 
+ `normalizedName` (string) 

## RoleForManipulationDto (object)
### Properties
+ `name` (string, required)

## ShapedDataWithLinksApplicationClients (object)
### Properties
+ `value` (array[ApplicationClientDto])
    Returns a list of application clients 
+ `links` (array[LinkDto])
    Returns a list of links
    
## ShapedDataWithLinksFarm (object)
### Properties
+ `value` (FarmDto)
    Return a farm
+ `links` (array[LinkDto])
    Returns a list of links

## ShapedDataWithLinksFarms (object)
### Properties
+ `value` (array[FarmDto])
    Returns a list of farms
+ `links` (array[LinkDto])
    Returns a list of links
    
## ShapedDataWithLinksFarmWithShapedChildren (object)
### Properties
+ `value` (FarmWithShapedChildrenDto)
    Return a farm
+ `links` (array[LinkDto])
    Returns a list of links

## ShapedDataWithLinksFarmsWithShapedChildren (object)
### Properties
+ `value` (array[FarmWithShapedChildrenDto])
    Returns a list of farms
+ `links` (array[LinkDto])
    Returns a list of links

## ShapedDataWithLinksFields (object)
### Properties
+ `value` (array[FieldDto])
    Returns a list of fields
+ `links` (array[LinkDto])
    Returns a list of links

## ShapedDataWithLinksRefreshTokens (object)
### Properties
+ `value` (array[ApplicationClientDto])
    Returns a list of application clients 
+ `links` (array[LinkDto])
    Returns a list of links

## ShapedDataWithLinksRoles (object)
### Properties
+ `value` (array[RoleDto])
    Returns a list of roles
+ `links` (array[LinkDto])
    Returns a list of links

## ShapedDataWithLinksUsers (object)
### Properties
+ `value` (array[UserDto])
    Returns a list of users
+ `links` (array[LinkDto])
    Returns a list of links

## Slideshow (object)
### Properties

## TermsAndConditions (object)
###Properties
+ `content` (string)
+ `_mby` (string)
+ `_by` (string)

## UserDto (object)
### Properties
+ `id` (string) 
+ `email` (string)

## UserEmailDto (object)
### Properties
+ `email` (string)

## UserForAuthenticationDto (object)
### Properties
+ `email`: myemail@test.com (string, required) 
+ `password`: Password1! (string, required)

## UserForRegistrationDto (object)
### Properties
+ `userType` (string, optional, nullable) 
+ `email`: myemail@test.com (string, required) 
+ `password`: Password1! (string, required) - Min 6 characters , requires a digit, lowecase, uppercase and special character

## UserProfileDto (object)
### Properties
+ `id` (string)
+ `userId` (string)
+ `fullName` (string)
+ `phoneNumber` (string)
+ `mobileNumber` (string)
+ `fullAddress` (string)

## UserProfileForCreationDto (object)
### Properties
+ `firstName` (string)
+ `lastName` (string)
+ `phoneNumber` (string)
+ `mobileNumber` (string)
+ `street` (string)
+ `city` (string)
+ `postcode` (string)
+ `country` (string)

## UserProfileForUpdateDto (object)
### Properties
+ `firstName` (string)
+ `lastName` (string)
+ `phoneNumber` (string)
+ `mobileNumber` (string)
+ `street` (string)
+ `city` (string)
+ `postcode` (string)
+ `country` (string)

## UserRegistrationReturnDto (object)
### Properties
+ `id` (string)
+ `email` (string)
+ `emailSentDuringRegistration` (boolean)

## UserWithRolesClaimsDto (object)
### Properties
+ `id` (string) 
+ `email` (string) 
+ `roles` (array[RoleDto]) - List of roles
+ `claims` (array[Claim]) - List of claims applied to the user